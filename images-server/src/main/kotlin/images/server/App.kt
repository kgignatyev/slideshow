/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package images.server

import io.ktor.server.application.*
import io.ktor.server.plugins.cors.*
import io.ktor.http.*
import io.ktor.serialization.gson.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.server.engine.*
import io.ktor.server.http.content.*
import io.ktor.server.netty.*
import io.ktor.server.plugins.contentnegotiation.*
import java.io.File
import java.net.URLDecoder

fun getProperty( key:String, defaultVal:String):String{
    println( "looking for parameter -D$key=...")
    var v = System.getProperty(key)
    if( v == null){
        println("no value supplied, use default: $defaultVal")
        v = defaultVal
    }
    return v
}

fun main(args: Array<String>) {
    val port = getProperty("port","8080" ).toInt()
    val photosRoot = getProperty("photos-root","/Volumes/kgi-backup/photos/light_room" )
    println("will show photos from folder: $photosRoot")
    println("to change location set property -Dphotos-root=<desired location>")
    println("visit  http://localhost:$port/app to start slideshow")

    val photosDeleteDir = photosRoot+ "-deleted";
    val imagesSupplier = ImagesSupplier(File(photosRoot), File(photosDeleteDir))


    val resourceImages = "/api/images/"
    embeddedServer(Netty, port = port) {
        install(CORS){
            this.methods.add(HttpMethod.Delete)
            anyHost()
        }
        install(Routing){

        }

        install(ContentNegotiation) {
            gson {
                setPrettyPrinting()
                disableHtmlEscaping()
                // ...
            }
        }

        routing {
            get("/") {
                call.respondText("<body> <a href='http://localhost:$port/app'>Start slideshow</a></body>", ContentType.parse("text/html"))
            }
            get("/api/random-image") {
                call.respond(imagesSupplier.getRandomImage())
            }
            delete("${resourceImages}{...}") {
                val uri = call.request.uri
                val imgPath = URLDecoder.decode( uri.substring(resourceImages.length) )
                call.respond(imagesSupplier.deleteImage(imgPath))
            }
//            static("images"){
//                staticRootFolder = imagesSupplier.rootDirForKtor()
//                files(imagesSupplier.filesForKtor())
//            }
            staticFiles("/images", imagesSupplier.rootFolder )

            staticFiles("/app", File("slideshow-spa"), index = "index.html")
        }


    }.start(true)
}



